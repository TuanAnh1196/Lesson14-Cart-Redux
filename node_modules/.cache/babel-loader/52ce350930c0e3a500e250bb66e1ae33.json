{"ast":null,"code":"var _jsxFileName = \"/Users/tinhphan/Workspace/PSCD/Training/reactjs/tuan-anh/Lesson14-Cart-Redux/src/containers/CartContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Cart from './../components/Cart';\nimport CartItem from './../components/CartItem';\nimport CartResult from './../components/CartResult';\nimport * as Message from './../constants/Message';\nimport { actDeleteProductInCart, actChangeMessage, actUpdateProductInCart } from '../actions';\n\nclass CartContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.showCartItem = cart => {\n      var _this$props = this.props,\n          onDeleteProductInCart = _this$props.onDeleteProductInCart,\n          onChangeMessage = _this$props.onChangeMessage,\n          onUpdateProductInCart = _this$props.onUpdateProductInCart;\n      var result = React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, Message.MSG_CART_EMPTY));\n\n      if (cart.length > 0) {\n        result = cart.map((item, index) => {\n          return React.createElement(CartItem, {\n            key: index,\n            item: item,\n            index: index,\n            onDeleteProductInCart: onDeleteProductInCart,\n            onChangeMessage: onChangeMessage,\n            onUpdateProductInCart: onUpdateProductInCart,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          });\n        });\n      }\n\n      return result;\n    };\n\n    this.showTotalAmount = cart => {\n      var result = null;\n\n      if (cart.length > 0) {\n        result = React.createElement(CartResult, {\n          cart: cart,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        });\n      }\n\n      return result;\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log('prevProps', prevProps);\n    console.log('this.props', this.props);\n  }\n\n  render() {\n    var cart = this.props.cart;\n    return React.createElement(Cart, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, this.showCartItem(cart), this.showTotalAmount(cart));\n  }\n\n}\n\nCartContainer.propTypes = {\n  cart: PropTypes.arrayOf(PropTypes.shape({\n    products: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      image: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n      price: PropTypes.number.isRequired,\n      inventory: PropTypes.number.isRequired,\n      rating: PropTypes.number.isRequired\n    })).isRequired,\n    quantity: PropTypes.number.isRequired\n  })).isRequired,\n  onDeleteProductInCart: PropTypes.func.isRequired,\n  onChangeMessage: PropTypes.func.isRequired,\n  onUpdateProductInCart: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    cart: state.cart\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onDeleteProductInCart: product => {\n      dispatch(actDeleteProductInCart(product));\n    },\n    onChangeMessage: message => {\n      dispatch(actChangeMessage(message));\n    },\n    onUpdateProductInCart: (product, quantity) => {\n      dispatch(actUpdateProductInCart(product, quantity));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartContainer);","map":{"version":3,"sources":["/Users/tinhphan/Workspace/PSCD/Training/reactjs/tuan-anh/Lesson14-Cart-Redux/src/containers/CartContainer.js"],"names":["React","Component","connect","PropTypes","Cart","CartItem","CartResult","Message","actDeleteProductInCart","actChangeMessage","actUpdateProductInCart","CartContainer","showCartItem","cart","props","onDeleteProductInCart","onChangeMessage","onUpdateProductInCart","result","MSG_CART_EMPTY","length","map","item","index","showTotalAmount","componentDidUpdate","prevProps","console","log","render","propTypes","arrayOf","shape","products","id","number","isRequired","name","string","image","description","price","inventory","rating","quantity","func","mapStateToProps","state","mapDispatchToProps","dispatch","product","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Cart from './../components/Cart';\nimport CartItem from './../components/CartItem';\nimport CartResult from './../components/CartResult';\nimport * as Message from './../constants/Message';\nimport { actDeleteProductInCart, actChangeMessage, actUpdateProductInCart } from '../actions';\n\nclass CartContainer extends Component {\n  componentDidUpdate(prevProps) {\n    console.log('prevProps', prevProps);\n    console.log('this.props', this.props);\n  }\n\n  render() {\n    var { cart } = this.props;\n\n    return (\n      <Cart>\n        {this.showCartItem(cart)}\n        {this.showTotalAmount(cart)}\n      </Cart>\n    );\n\n  }\n  showCartItem = (cart) => {\n    var { onDeleteProductInCart, onChangeMessage, onUpdateProductInCart } = this.props;\n    var result = <tr><td>{Message.MSG_CART_EMPTY}</td></tr>;\n    if (cart.length > 0) {\n      result = cart.map((item, index) => {\n        return (\n          <CartItem\n            key={index}\n            item={item}\n            index={index}\n            onDeleteProductInCart={onDeleteProductInCart}\n            onChangeMessage={onChangeMessage}\n            onUpdateProductInCart={onUpdateProductInCart}\n          />\n        );\n      });\n    }\n    return result;\n  }\n  showTotalAmount = (cart) => {\n    var result = null;\n    if (cart.length > 0) {\n      result = <CartResult cart={cart} />\n    }\n    return result;\n\n  }\n}\n\nCartContainer.propTypes = {\n  cart: PropTypes.arrayOf(PropTypes.shape({\n    products: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        image: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        inventory: PropTypes.number.isRequired,\n        rating: PropTypes.number.isRequired,\n      })\n    ).isRequired,\n    quantity: PropTypes.number.isRequired,\n  })\n  ).isRequired,\n  onDeleteProductInCart: PropTypes.func.isRequired,\n  onChangeMessage: PropTypes.func.isRequired,\n  onUpdateProductInCart: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cart: state.cart\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onDeleteProductInCart: (product) => {\n      dispatch(actDeleteProductInCart(product));\n    },\n    onChangeMessage: (message) => {\n      dispatch(actChangeMessage(message));\n    },\n    onUpdateProductInCart: (product, quantity) => {\n      dispatch(actUpdateProductInCart(product, quantity));\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartContainer);\n"]},"metadata":{},"sourceType":"module"}