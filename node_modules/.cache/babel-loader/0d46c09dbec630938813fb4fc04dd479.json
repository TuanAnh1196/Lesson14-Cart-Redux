{"ast":null,"code":"var _jsxFileName = \"/Users/tinhphan/Workspace/PSCD/Training/reactjs/tuan-anh/Lesson14-Cart-Redux/src/containers/CartContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Cart from './../components/Cart';\nimport CartItem from './../components/CartItem';\nimport CartResult from './../components/CartResult';\nimport * as Message from './../constants/Message';\nimport { actDeleteProductInCart, actChangeMessage, actUpdateProductInCart } from '../actions';\n\nclass CartContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.showCartItem = cart => {\n      var _this$props = this.props,\n          onDeleteProductInCart = _this$props.onDeleteProductInCart,\n          onChangeMessage = _this$props.onChangeMessage,\n          onUpdateProductInCart = _this$props.onUpdateProductInCart;\n      var result = React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, Message.MSG_CART_EMPTY));\n\n      if (cart.length > 0) {\n        result = cart.map((item, index) => {\n          return React.createElement(CartItem, {\n            key: index,\n            item: item,\n            index: index,\n            onDeleteProductInCart: onDeleteProductInCart,\n            onChangeMessage: onChangeMessage,\n            onUpdateProductInCart: onUpdateProductInCart,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          });\n        });\n      }\n\n      return result;\n    };\n\n    this.showTotalAmount = cart => {\n      var result = null;\n\n      if (cart.length > 0) {\n        result = React.createElement(CartResult, {\n          cart: cart,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      }\n\n      return result;\n    };\n  }\n\n  componentDidMount() {\n    console.log('did mount');\n  } // componentDidUpdate(prevProps) {\n  //   console.log('prevProps', prevProps.cart[0].quantity);\n  //   console.log('this.props', this.props.cart[0].quantity);\n  // }\n\n\n  render() {\n    var _this$props2 = this.props,\n        cart = _this$props2.cart,\n        onDeleteProductInCart = _this$props2.onDeleteProductInCart,\n        onChangeMessage = _this$props2.onChangeMessage,\n        onUpdateProductInCart = _this$props2.onUpdateProductInCart;\n    return React.createElement(Cart, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, cart.map((item, index) => {\n      return React.createElement(CartItem, {\n        key: index,\n        item: item,\n        index: index,\n        onDeleteProductInCart: onDeleteProductInCart,\n        onChangeMessage: onChangeMessage,\n        onUpdateProductInCart: onUpdateProductInCart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }), this.showTotalAmount(cart));\n  }\n\n}\n\nCartContainer.propTypes = {\n  cart: PropTypes.arrayOf(PropTypes.shape({\n    product: PropTypes.object.isRequired,\n    quantity: PropTypes.number.isRequired\n  })),\n  onDeleteProductInCart: PropTypes.func.isRequired,\n  onChangeMessage: PropTypes.func.isRequired,\n  onUpdateProductInCart: PropTypes.func.isRequired\n};\nCartContainer.defaultProps = {\n  cart: []\n};\n\nconst mapStateToProps = state => {\n  return {\n    cart: state.cart\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onDeleteProductInCart: product => {\n      dispatch(actDeleteProductInCart(product));\n    },\n    onChangeMessage: message => {\n      dispatch(actChangeMessage(message));\n    },\n    onUpdateProductInCart: (product, quantity) => {\n      dispatch(actUpdateProductInCart(product, quantity));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartContainer);","map":{"version":3,"sources":["/Users/tinhphan/Workspace/PSCD/Training/reactjs/tuan-anh/Lesson14-Cart-Redux/src/containers/CartContainer.js"],"names":["React","Component","connect","PropTypes","Cart","CartItem","CartResult","Message","actDeleteProductInCart","actChangeMessage","actUpdateProductInCart","CartContainer","showCartItem","cart","props","onDeleteProductInCart","onChangeMessage","onUpdateProductInCart","result","MSG_CART_EMPTY","length","map","item","index","showTotalAmount","componentDidMount","console","log","render","propTypes","arrayOf","shape","product","object","isRequired","quantity","number","func","defaultProps","mapStateToProps","state","mapDispatchToProps","dispatch","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AACA,SAASC,sBAAT,EAAiCC,gBAAjC,EAAmDC,sBAAnD,QAAiF,YAAjF;;AAEA,MAAMC,aAAN,SAA4BV,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAUpCW,YAVoC,GAUpBC,IAAD,IAAU;AAAA,wBACiD,KAAKC,KADtD;AAAA,UACjBC,qBADiB,eACjBA,qBADiB;AAAA,UACMC,eADN,eACMA,eADN;AAAA,UACuBC,qBADvB,eACuBA,qBADvB;AAEvB,UAAIC,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKX,OAAO,CAACY,cAAb,CAAJ,CAAb;;AACA,UAAIN,IAAI,CAACO,MAAL,GAAc,CAAlB,EAAqB;AACnBF,QAAAA,MAAM,GAAGL,IAAI,CAACQ,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,iBACE,oBAAC,QAAD;AACE,YAAA,GAAG,EAAEA,KADP;AAEE,YAAA,IAAI,EAAED,IAFR;AAGE,YAAA,KAAK,EAAEC,KAHT;AAIE,YAAA,qBAAqB,EAAER,qBAJzB;AAKE,YAAA,eAAe,EAAEC,eALnB;AAME,YAAA,qBAAqB,EAAEC,qBANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD,SAXQ,CAAT;AAYD;;AACD,aAAOC,MAAP;AACD,KA5BmC;;AAAA,SA6BpCM,eA7BoC,GA6BjBX,IAAD,IAAU;AAC1B,UAAIK,MAAM,GAAG,IAAb;;AACA,UAAIL,IAAI,CAACO,MAAL,GAAc,CAAlB,EAAqB;AACnBF,QAAAA,MAAM,GAAG,oBAAC,UAAD;AAAY,UAAA,IAAI,EAAEL,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AACD;;AACD,aAAOK,MAAP;AAED,KApCmC;AAAA;;AACpCO,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,GAHmC,CAKpC;AACA;AACA;AACA;;;AA+BAC,EAAAA,MAAM,GAAG;AAAA,uBAMH,KAAKd,KANF;AAAA,QAELD,IAFK,gBAELA,IAFK;AAAA,QAGLE,qBAHK,gBAGLA,qBAHK;AAAA,QAILC,eAJK,gBAILA,eAJK;AAAA,QAKLC,qBALK,gBAKLA,qBALK;AAQP,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGIJ,IAAI,CAACQ,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxB,aACE,oBAAC,QAAD;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,IAAI,EAAED,IAFR;AAGE,QAAA,KAAK,EAAEC,KAHT;AAIE,QAAA,qBAAqB,EAAER,qBAJzB;AAKE,QAAA,eAAe,EAAEC,eALnB;AAME,QAAA,qBAAqB,EAAEC,qBANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD,KAXD,CAHJ,EAgBG,KAAKO,eAAL,CAAqBX,IAArB,CAhBH,CADF;AAqBD;;AApEmC;;AAuEtCF,aAAa,CAACkB,SAAd,GAA0B;AACxBhB,EAAAA,IAAI,EAAEV,SAAS,CAAC2B,OAAV,CAAkB3B,SAAS,CAAC4B,KAAV,CAAgB;AACtCC,IAAAA,OAAO,EAAE7B,SAAS,CAAC8B,MAAV,CAAiBC,UADY;AAEtCC,IAAAA,QAAQ,EAAEhC,SAAS,CAACiC,MAAV,CAAiBF;AAFW,GAAhB,CAAlB,CADkB;AAMxBnB,EAAAA,qBAAqB,EAAEZ,SAAS,CAACkC,IAAV,CAAeH,UANd;AAOxBlB,EAAAA,eAAe,EAAEb,SAAS,CAACkC,IAAV,CAAeH,UAPR;AAQxBjB,EAAAA,qBAAqB,EAAEd,SAAS,CAACkC,IAAV,CAAeH;AARd,CAA1B;AAWAvB,aAAa,CAAC2B,YAAd,GAA6B;AAC3BzB,EAAAA,IAAI,EAAE;AADqB,CAA7B;;AAIA,MAAM0B,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACL3B,IAAAA,IAAI,EAAE2B,KAAK,CAAC3B;AADP,GAAP;AAGD,CAJD;;AAMA,MAAM4B,kBAAkB,GAAG,CAACC,QAAD,EAAW5B,KAAX,KAAqB;AAC9C,SAAO;AACLC,IAAAA,qBAAqB,EAAGiB,OAAD,IAAa;AAClCU,MAAAA,QAAQ,CAAClC,sBAAsB,CAACwB,OAAD,CAAvB,CAAR;AACD,KAHI;AAILhB,IAAAA,eAAe,EAAG2B,OAAD,IAAa;AAC5BD,MAAAA,QAAQ,CAACjC,gBAAgB,CAACkC,OAAD,CAAjB,CAAR;AACD,KANI;AAOL1B,IAAAA,qBAAqB,EAAE,CAACe,OAAD,EAAUG,QAAV,KAAuB;AAC5CO,MAAAA,QAAQ,CAAChC,sBAAsB,CAACsB,OAAD,EAAUG,QAAV,CAAvB,CAAR;AACD;AATI,GAAP;AAWD,CAZD;;AAcA,eAAejC,OAAO,CAACqC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C9B,aAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Cart from './../components/Cart';\nimport CartItem from './../components/CartItem';\nimport CartResult from './../components/CartResult';\nimport * as Message from './../constants/Message';\nimport { actDeleteProductInCart, actChangeMessage, actUpdateProductInCart } from '../actions';\n\nclass CartContainer extends Component {\n  componentDidMount() {\n    console.log('did mount')\n  }\n\n  // componentDidUpdate(prevProps) {\n  //   console.log('prevProps', prevProps.cart[0].quantity);\n  //   console.log('this.props', this.props.cart[0].quantity);\n  // }\n\n  showCartItem = (cart) => {\n    var { onDeleteProductInCart, onChangeMessage, onUpdateProductInCart } = this.props;\n    var result = <tr><td>{Message.MSG_CART_EMPTY}</td></tr>;\n    if (cart.length > 0) {\n      result = cart.map((item, index) => {\n        return (\n          <CartItem\n            key={index}\n            item={item}\n            index={index}\n            onDeleteProductInCart={onDeleteProductInCart}\n            onChangeMessage={onChangeMessage}\n            onUpdateProductInCart={onUpdateProductInCart}\n          />\n        );\n      });\n    }\n    return result;\n  }\n  showTotalAmount = (cart) => {\n    var result = null;\n    if (cart.length > 0) {\n      result = <CartResult cart={cart} />\n    }\n    return result;\n\n  }\n\n\n  render() {\n    var { \n      cart, \n      onDeleteProductInCart, \n      onChangeMessage, \n      onUpdateProductInCart \n    } = this.props;\n\n    return (\n      <Cart>\n        {/* {this.showCartItem(cart)} */}\n        {\n          cart.map((item, index) => {\n            return (\n              <CartItem\n                key={index}\n                item={item}\n                index={index}\n                onDeleteProductInCart={onDeleteProductInCart}\n                onChangeMessage={onChangeMessage}\n                onUpdateProductInCart={onUpdateProductInCart}\n              />\n            )\n          })\n        }\n        {this.showTotalAmount(cart)}\n      </Cart>\n    );\n\n  }\n}\n\nCartContainer.propTypes = {\n  cart: PropTypes.arrayOf(PropTypes.shape({\n    product: PropTypes.object.isRequired,\n    quantity: PropTypes.number.isRequired,\n  })\n  ),\n  onDeleteProductInCart: PropTypes.func.isRequired,\n  onChangeMessage: PropTypes.func.isRequired,\n  onUpdateProductInCart: PropTypes.func.isRequired\n}\n\nCartContainer.defaultProps = {\n  cart: []\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cart: state.cart\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onDeleteProductInCart: (product) => {\n      dispatch(actDeleteProductInCart(product));\n    },\n    onChangeMessage: (message) => {\n      dispatch(actChangeMessage(message));\n    },\n    onUpdateProductInCart: (product, quantity) => {\n      dispatch(actUpdateProductInCart(product, quantity));\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartContainer);\n"]},"metadata":{},"sourceType":"module"}